@page "/"
@using System.Text
@using Velopack
@using Velopack.Sources

<div class="flex w-full h-full">

    <div class="flex relative w-full h-full">

        <!-- WHEN NEW UPDATE IS FOUND -->
        @if (newUpdateAvailable && updateManager is not null)
        {
            <div class="absolute w-full h-fit p-3 cursor-pointer">
                <div class="flex w-full h-full  rounded-xl px-6 py-3 border-[1px] border-gray_1
                            @(isDownloadingNewVersion ? (updateManager.IsUpdatePendingRestart ? "bg-primary text-white" 
                                                                                    : "bg-primary bg-opacity-20") 
                                                      : "from-primary/20 hover:from-primary hover:text-white bg-gradient-to-r to-black transition-all duration-500")">
                    
                    @if (isDownloadingNewVersion && !updateManager.IsUpdatePendingRestart)
                    {
                        <div class="flex flex-col w-full">
                            <h1 class="text-white font-bold text-lg tracking-widest">DOWNLOADING...</h1>
                            <div class="bg-primary h-2.5 rounded-xl" style="width: @updateBarProgress%"></div>
                        </div>
                    }
                    else if (updateManager.IsUpdatePendingRestart)
                    {
                        <div class="flex flex-col w-full" @onclick="ApplyUpdatesAndRestart">
                            <h1 class="text-white font-bold text-lg tracking-widest">CLICK TO RESTART AND APPLY UPDATES...</h1>
                        </div>
                    }
                    else
                    {
                        <div class="flex flex-col w-full" @onclick="DownloadNewUpdate">
                            <h1 class="text-white font-bold text-lg tracking-widest">NEW UPDATE!</h1>
                            <p>A new version of BEACON has been found</p>
                        </div>
                        <div class="text-right w-full self-center">
                                NEW VERSION - @newVersion
                        </div>
                    }
                    
                </div>
            </div>
        }

    </div>

</div>

@code{

    private UpdateManager? updateManager;
    private UpdateInfo? newUpdate;

    private string newVersion = "";

    private bool newUpdateAvailable = false;
    private bool isDownloadingNewVersion = false;

    private int updateBarProgress = 0;

    protected override async Task OnInitializedAsync()
    {
        await CheckForUpdate().ConfigureAwait(false);
    }

    private void Progress(int percent)
    {
        InvokeAsync(() => 
                    { 
                        updateBarProgress = percent;
                        StateHasChanged();
                    });
    }

    private async Task DownloadNewUpdate()
    {
        try
        {
            isDownloadingNewVersion = true;

            if (updateManager is not null && newUpdate is not null) 
                await updateManager.DownloadUpdatesAsync(newUpdate, Progress).ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            var a = ex;
        }
    }

    private void ApplyUpdatesAndRestart()
    {
        if(updateManager is not null && newUpdate is not null)
            updateManager.ApplyUpdatesAndRestart(newUpdate);
    }

    private async Task CheckForUpdate()
    {
        updateManager = new UpdateManager(new GithubSource("https://github.com/Welch-Engine/BeaconWPF", "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", false));

        if (updateManager is null || !updateManager.IsInstalled) return;

        newUpdate = await updateManager.CheckForUpdatesAsync().ConfigureAwait(false);

        if (newUpdate == null) return;

        newUpdateAvailable = true;
        newVersion = newUpdate.TargetFullRelease.Version.ToString();
    }
}