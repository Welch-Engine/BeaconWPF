@page "/"
@using System.Text
@using Velopack
@using Velopack.Sources

<div class="flex h-full w-full flex-col gap-3 p-3">

    <!-- WHEN NEW UPDATE IS FOUND -->
        @if (newUpdateAvailable && updateManager is not null)
    {
        <div class="border-[1px] flex h-fit w-full cursor-pointer rounded-xl border-gray_1 px-6 py-3 @(isDownloadingNewVersion ? (updateManager.IsUpdatePendingRestart ? "bg-primary text-white" : "bg-primary bg-opacity-20")
                                                  : "from-primary/20 hover:from-primary hover:text-white bg-gradient-to-r to-black transition-all duration-500")">

            @if (isDownloadingNewVersion && !updateManager.IsUpdatePendingRestart)
            {
                <div class="flex w-full flex-col">
                    <h1 class="text-lg font-bold tracking-widest text-white">DOWNLOADING...</h1>
                    <div class="h-2.5 rounded-xl bg-primary" style="width: @updateBarProgress%"></div>
                </div>
            }
            else if (updateManager.IsUpdatePendingRestart)
            {
                <div class="flex w-full flex-col" @onclick="ApplyUpdatesAndRestart">
                    <h1 class="text-lg font-bold tracking-widest text-white">CLICK TO RESTART AND APPLY UPDATES...</h1>
                </div>
            }
            else
            {
                <div class="flex w-full flex-col" @onclick="DownloadNewUpdate">
                    <h1 class="text-lg font-bold tracking-widest text-white">NEW UPDATE!</h1>
                    <p>A new version of BEACON has been found</p>
                </div>
                <div class="w-full self-center text-right">
                    NEW VERSION - @newVersion
                </div>
            }
        </div>
    }

    <div class="relative flex h-full w-full flex-col">

        <div class="">
            SETTINGS
        </div>
    </div>

</div>

@code{

    private UpdateManager? updateManager;
    private UpdateInfo? newUpdate;

    private string newVersion = "";
    private bool newUpdateAvailable;
    private bool isDownloadingNewVersion;
    private int updateBarProgress = 0;

    protected override async Task OnInitializedAsync()
    {
        await CheckForUpdate().ConfigureAwait(false);
        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }

    //[UPDATE MANAGER]=========================================================
    private void Progress(int percent)
    {
        InvokeAsync(() => 
                    { 
                        StateHasChanged();
                        updateBarProgress = percent;
                        StateHasChanged();
                    });
    }
    private void ApplyUpdatesAndRestart()
    {
        if(updateManager is not null && newUpdate is not null)
            updateManager.ApplyUpdatesAndRestart(newUpdate);
    }
    private async Task DownloadNewUpdate()
    {
        isDownloadingNewVersion = true;
        await InvokeAsync(StateHasChanged).ConfigureAwait(false);

        try
        {
            if (updateManager is not null && newUpdate is not null) 
                await updateManager.DownloadUpdatesAsync(newUpdate, Progress).ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            var a = ex;
        }
    }

    private async Task CheckForUpdate()
    {
        updateManager = new UpdateManager(new GithubSource("https://github.com/Welch-Engine/BeaconWPF", null, false));

        if (updateManager is null || !updateManager.IsInstalled) return;

        newUpdate = await updateManager.CheckForUpdatesAsync().ConfigureAwait(false);

        if (newUpdate == null) return;

        newUpdateAvailable = true;
        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
        newVersion = newUpdate.TargetFullRelease.Version.ToString();
        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }
}