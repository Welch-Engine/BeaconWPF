@page "/SongLibrary"
@inject ISongService songService
@inject IHistoryService historyService
@inject IJSRuntime jSRuntime
@inject ISessionStorageService sessionStorage
@implements IDisposable

<div class="-z-10 absolute left-0 top-0 hidden h-full w-16 bg-gray_2 md:block"> </div>

<div class="relative flex h-full w-full">

    <!-- LEFT HALF -->
    <div class="z-10 flex h-full w-full flex-col gap-3 self-start rounded-r-3xl bg-gray_2 p-3 md:w-5/12">

        <!-- ADD SONG -->
        <div class="flex w-full justify-between">
            <ToggleButton Icon="L" Message="VIEW QUEUE" Css="border-gray_1 px-6 py-3 " IsChecked="songQueuesMode" OnClick="ToggleSongQueuesMode"></ToggleButton>
            <Button Icon="S" Message="ADD SONG" Background="1" Css="@(songQueuesMode ? "hidden" : "hover:bg-opacity-50 hover:text-white px-6 py-3")" OnClick="AddSong"></Button>
            <Button Icon="R" Message="CLEAR QUEUE" Background="1" Css="@(songQueuesMode ? "hover:bg-opacity-50 hover:text-white px-6 py-3" : "hidden")" OnClick="ClearQueue"></Button>
        </div>

        <!-- QUERY SONG INPUT -->
        @if(!songQueuesMode){
            <DebounceInput type="text" class="border-0 h-16 w-full rounded-xl bg-black px-4 text-sm" placeholder="Search..." DebounceTime="150"
                           @bind-Value="searchTerm" @bind-Value:event="oninput" OnValueChanged="OnInputQuery" @onkeydown="OnSearchInputKeyDown" />
        }
        <!-- SONG LIST -->
        <SongList Songs="songs" SelectedSong="selectedSong" OnSongChanged="OnSongChange" SongQueueMode="songQueuesMode"
                  AddRemoveSongFromQueue="@((song) => AddRemoveSongFromQueue(song))" DeleteSong="DeleteSong"></SongList>
    </div>

    <!-- EDIT SONG: LEFT HALF -->
    <div class="z-10 absolute flex h-full w-full flex-col gap-6 self-start rounded-r-3xl bg-gray_2 p-3 md:w-5/12 @(isEditMode ? "" : "hidden")">
        
        <label class="-mb-5 font-bold tracking-widest">LYRIC EDITOR</label>
        <textarea class="border-0 h-full w-full rounded-xl bg-black bg-opacity-50 p-4 text-sm" placeholder="Lyrics" spellcheck="false"
                  @bind="@selectedSong.LyricText" @bind:event="oninput"></textarea>

        <p class="-mb-5 font-bold tracking-widest">SEQUENCE</p>
        <input class="border-0 h-12 w-full rounded-xl bg-black bg-opacity-50 p-4 text-sm placeholder:opacity-50" placeholder="1, C, 2..." @bind-Value="@selectedSong.Sequence" @bind-Value:event="oninput" />
        
        <p class="-mb-5 font-bold tracking-widest">LANGUAGE</p>
        <input class="border-0 h-12 w-full rounded-xl bg-black bg-opacity-50 p-4 text-sm placeholder:opacity-50" placeholder="Language" @bind-Value="@selectedSong.Language" @bind-Value:event="oninput" />

        <p class="-mb-5 font-bold tracking-widest">TAGS</p>
        <input class="border-0 h-12 w-full rounded-xl bg-black bg-opacity-50 p-4 text-sm placeholder:opacity-50" placeholder="Tags" @bind-Value="@selectedSong.Tags" @bind-Value:event="oninput" />

    </div>

    <!-- BACKGROUND GRAY 3 -->
    <div class="-z-0 absolute h-40 w-full bg-gray_3"></div>

    <!-- RIGHT HALF -->
    <div class="z-10 flex h-full w-7/12 flex-col @(showSongInfo ? "absolute w-full md:static md:w-7/12" : "hidden md:flex")">

        <div class="flex h-40 w-full items-center justify-between bg-gray_3 px-10">

            <!-- TITLE AND AUTHOR -->
            <div class="mr-2 flex w-full flex-col gap-1">
                <input class="line-clamp-1 w-full rounded-xl @(isEditMode ? "bg-black px-6 border-0 text-lg md:text-2xl" : "bg-transparent border-0 font-bold md:text-4xl text-xl")" disabled="@(!isEditMode)" spellcheck="false" placeholder="Title" @bind-Value="@selectedSong.Title" @bind-Value:event="oninput" />
                <input class="line-clamp-1 w-full rounded-xl text-sm @(isEditMode ? "bg-black px-6 border-0" : "bg-transparent border-0 -mt-5")" disabled="@(!isEditMode)" spellcheck="false" placeholder="Author" @bind-Value="@selectedSong.Author" @bind-Value:event="oninput" />
            </div>

            <div class="flex w-fit min-w-fit flex-col gap-3 whitespace-nowrap">
                @if (showSongInfo)
                {
                    <Button Icon="b" Message="BACK" Css="px-6 py-3 md:hidden" Background="2" OnClick="(() => {showSongInfo = false;})"></Button>
                }

                @if (selectedSong.Id != 0)
                {
                    <ToggleButton IsChecked="isEditMode" Icon="@(isEditMode ? "s" : "E")" Message="@(isEditMode ? "SAVE" : "EDIT")" Css="border-gray_1 min-w-fit" OnClick="ToggleEditMode"></ToggleButton>
                }
            </div>
        </div>

        <div class="flex h-full w-full flex-col overflow-y-hidden bg-black py-1">

            <!-- LYRIC LIST -->
            <LyricList Lyrics="selectedSong.Lyrics()" SelectedLyric="selectedLyric" OnLyricChanged="OnLyricChange"></LyricList>

            <div class="flex h-fit w-full gap-2 overflow-x-auto p-1">
                @foreach(var language in songLanguages)
                {
                    var isSelected = selectedSong.Id == language.Id;
                    <Button HasIconMargin="false" Message="@language.Language" Css="@(isSelected ? "bg-primary px-6 py-3 text-white" : "px-6 py-3 bg-gray_2")"
                            OnClick="(async () => {await OnSongChange(language); })"></Button>
                }
                @if (selectedSong.Id != 0)
                {
                    <Button Message="+" HasIconMargin="false" Css="bg-gray_1 px-6 py-3 text-white"></Button>
                }
            </div>

        </div>

    </div>
</div>


@code{
    private List<Song> songs = new List<Song>();
    private List<Song> songLanguages = new List<Song>();
    private Song selectedSong = new Song();
    private Lyric selectedLyric = new Lyric();
    private Stopwatch sw = new Stopwatch();

    private string searchTerm = "";
    private bool showSongInfo = false;
    private bool isEditMode = false;
    private bool songQueuesMode = false;


    protected override async Task OnInitializedAsync()
    {
        // FOR SECOND WINDOW
        // https://stackoverflow.com/questions/2329978/the-calling-thread-must-be-sta-because-many-ui-components-require-this

        await RefreshSongs().ConfigureAwait(false);


        //Session
        Song sessionSong = await sessionStorage.GetItemAsync<Song>("selectedSong");
        isEditMode = await sessionStorage.GetItemAsync<bool>("isEditMode");
        songQueuesMode = await sessionStorage.GetItemAsync<bool>("songQueuesMode");
        searchTerm = await sessionStorage.GetItemAsync<string>("searchTerm");

        if (songQueuesMode)
        {
            songQueuesMode = false; // set it back to false
            await ToggleSongQueuesMode(); // so we can toggle it to true
        }

        if(sessionSong is not null)
        {
            sessionSong.LyricText = "";
            await OnSongChange(sessionSong);   
        }

        if (isEditMode)
        {
            isEditMode = false; // set it back to false
            await ToggleEditMode(); // so we can toggle it to true
        }

        if (!String.IsNullOrEmpty(searchTerm)) await OnInputQuery();


        // if (songQueuesMode)
        // {
        //     songs = await songService.GetQueueAsync();
        // }
        // else
        // {
        //     searchTerm = ""; // Blank the search term
        //     await OnInputQuery(); // Then search songs
        // }

        // if (sessionSong is not null)
        // {
        //     await OnSongChange(sessionSong);

        //     int index = songs.FindIndex(s => s.Id == selectedSong.Id);
        //     // await Task.Delay(1);
        //     // await jSRuntime.InvokeVoidAsync("ScrollTo", songElement, index);
        //     // await Task.Delay(1);
        // }
        // if (!String.IsNullOrEmpty(searchTerm)) await OnInputQuery();
        // if (selectedSong.Id != 0) showSongInfo = await sessionStorage.GetItemAsync<bool>("lyricHidden");
    }

    public async void Dispose()
    {
        await sessionStorage.SetItemAsync<bool>("isEditMode", isEditMode);
        await sessionStorage.SetItemAsync<bool>("songQueuesMode", songQueuesMode);
        await sessionStorage.SetItemAsync<bool>("showSongInfo", showSongInfo);
        await sessionStorage.SetItemAsync<string>("searchTerm", searchTerm);
        await sessionStorage.SetItemAsync<Song>("selectedSong", selectedSong);

    }

    //[EVENTS]=====================================
    private async Task OnInputQuery()
    {
        if (String.IsNullOrWhiteSpace(searchTerm))
            await RefreshSongs().ConfigureAwait(false);
        else if (searchTerm.StartsWith("."))
            await RefreshSongs(await songService.QueryLyricAsync(searchTerm.Substring(1)).ConfigureAwait(false)).ConfigureAwait(false);
        else if (searchTerm.StartsWith("*"))
            await RefreshSongs(await songService.QueryAuthorAsync(searchTerm.Substring(1)).ConfigureAwait(false)).ConfigureAwait(false);
        else if (searchTerm.StartsWith("#"))
            await RefreshSongs(await songService.QueryTagsAsync(searchTerm.Substring(1)).ConfigureAwait(false)).ConfigureAwait(false);
        else
            await RefreshSongs(await songService.QueryTitleAsync(searchTerm).ConfigureAwait(false)).ConfigureAwait(false);

    }
    private async Task OnSongChange(Song song)
    {
        if (song is null) return;

        selectedSong = await songService.GetAsync(song.Id).ConfigureAwait(false);
        selectedLyric = new Lyric();

        if (!String.IsNullOrWhiteSpace(song.LyricText))
            selectedSong.LyricText = selectedSong.LyricText.AddHighlight(song.LyricText);

        await GetLanguages().ConfigureAwait(false);

        // Scroll to Song
        var index = songs.IndexOf(song);
        await jSRuntime.InvokeVoidAsync("ScrollWithDefinedSize", "SongList", index).ConfigureAwait(false);

        showSongInfo = true;

    }
    private async Task OnLyricChange(Lyric lyric)
    {
        if(lyric is null) return;

        selectedLyric = lyric;

        await Task.Delay(1).ConfigureAwait(false);
        await jSRuntime.InvokeVoidAsync("ScrollLogarithmically", "highlighted_lyric", "LyricList").ConfigureAwait(false);

        historyService.AddHistory(new History()
        {
            Number = 0,
            Date = DateTime.Now,
            Description = "◼ " + selectedSong.Title,
            SongID = selectedSong.Id,
            BibleID = -1
        });

        await InvokeAsync(() =>
        { 
            DisplayWindow.Instance.Show();
            DisplayWindow.Instance.Content.Text = lyric.Text.RemoveHighlight();
            DisplayWindow.Instance.Content.FontSize = 100;
            DisplayWindow.Instance.Content.TextWrapping = TextWrapping.NoWrap;
            DisplayWindow.Instance.Content.Width = Double.NaN;
            DisplayWindow.Instance.Content.HighlightCount = 0;
            DisplayWindow.Instance.Header1.Text = selectedSong.Title.ToUpper();
            DisplayWindow.Instance.Header2.Text = lyric.Id + " / " + selectedSong.Lyrics().Count();
        }).ConfigureAwait(false);
    }
    private async Task OnSearchInputKeyDown(KeyboardEventArgs args)
    {
        if(songs.Count() != 0 && args.Key == "Enter")
        {
            await Task.Delay(100);
            await OnSongChange(songs[0]).ConfigureAwait(false);
            await jSRuntime.InvokeVoidAsync("SwitchFocusTo", "SongList").ConfigureAwait(false);
        }
    }


    //[REFACTOR]=====================================
    private async Task RefreshSongs(List<Song>? songList = null)
    {
        songs.Clear();

        if (songList is null)
            songs = await songService.GetAllAsync().ConfigureAwait(false);
        else
            songs = songList;
    }
    private async Task ToggleSongQueuesMode()
    {
        songQueuesMode = !songQueuesMode;

        if (songQueuesMode)
            await RefreshSongs(await songService.GetQueueAsync().ConfigureAwait(false)).ConfigureAwait(false);
        else
            await RefreshSongs().ConfigureAwait(false);
    }
    private async Task ClearQueue()
    {
        if (!songQueuesMode)
            return;

        foreach(var song in songs)
        {
            await AddRemoveSongFromQueue(song, false).ConfigureAwait(false);
        }

        await RefreshSongs(await songService.GetQueueAsync().ConfigureAwait(false)).ConfigureAwait(false);
    }
    private async Task AddRemoveSongFromQueue(Song song, bool canModifySongList = true)
    {
        var completeSong = await songService.GetAsync(song.Id).ConfigureAwait(false);

        if (song.InQueue)
        {
            song.InQueue = false;
            completeSong.InQueue = false;
            completeSong.QueueOrder = 0;

            if (songQueuesMode && canModifySongList)
                songs.Remove(song);
        }
        else
        {
            var lastQueueOrderNumber = await songService.GetLastQueueOrderAsync().ConfigureAwait(false);

            song.InQueue = true;
            completeSong.InQueue = true;
            completeSong.QueueOrder = lastQueueOrderNumber + 1;
        }

        await UpdateSong(completeSong).ConfigureAwait(false);
    }
    private async Task ToggleEditMode()
    {
        isEditMode = !isEditMode;
        selectedLyric = new Lyric();

        if (isEditMode)
        {
            selectedSong.LyricText = selectedSong.LyricText.RemoveHighlight();
        }
        else
        {
            await UpdateSong(selectedSong).ConfigureAwait(false);
            await GetLanguages().ConfigureAwait(false);
        }
    }

    //[SONG CRUD]=====================================
    private async Task AddSong()
    {
        var number = await songService.GetLastNumberAsync().ConfigureAwait(false);
        await songService.AddAsync(new Song(number + 1, "Title", "Author")).ConfigureAwait(false);

        searchTerm = "";
        await RefreshSongs().ConfigureAwait(false);

        selectedSong = songs[songs.Count() - 1];
        await jSRuntime.InvokeVoidAsync("ScrollWithDefinedSize", "SongList", songs.Count()).ConfigureAwait(false);
    }
    private async Task UpdateSong(Song song)
    {
        var songInList = songs.Find(s => s.Id == song.Id);
        if (songInList is not null)
        {
            var index = songs.IndexOf(songInList!);
            songs[index].Title = song.Title;
            songs[index].Author = song.Author;
        }

        await songService.UpdateAsync(song).ConfigureAwait(false);
    }
    private async Task DeleteSong(Song song) 
    { 
        var index = songs.IndexOf(song);

        if (selectedSong.Id == song.Id)
            selectedSong = songs[Math.Max(index - 1, 0)];

        await songService.DeleteAsync(song).ConfigureAwait(false);

        if(songQueuesMode)
            await RefreshSongs(await songService.GetQueueAsync().ConfigureAwait(false)).ConfigureAwait(false);
        else
            await OnInputQuery().ConfigureAwait(false);

        if (songs.Count() == 0)
            return;

        await Task.Delay(1).ConfigureAwait(false);
        selectedSong = songs[songs.Count - 1];
        await jSRuntime.InvokeVoidAsync("ScrollWithDefinedSize", "SongList", songs.Count() - 1).ConfigureAwait(false);
    }
    private async Task AddLanguageToSong() => await songService.AddAsync(new Song(selectedSong.Number, "Title", "Author")).ConfigureAwait(false);
    private async Task GetLanguages()
    {
        songLanguages.Clear();
        songLanguages = await songService.GetLanguagesOfSongAsync(selectedSong.Number).ConfigureAwait(false);
    }

    private void HideSongInfo() => showSongInfo = false;
}