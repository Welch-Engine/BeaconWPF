@page "/BibleLibrary"
@inject IBibleService bibleService
@inject IJSRuntime jSRuntime

<div class="absolute top-0 left-0 hidden w-16 h-full bg-gray_2 -z-10 md:block"> </div>

<div class="absolute w-full h-40  bg-gradient-to-r from-black to-gray_2 -z-0"></div>

<div class="relative flex w-full h-full overflow-x-hidden">

    <!-- BOOKS -->
    <div class="z-10 flex flex-col self-start w-full h-full gap-3 p-3 bg-gray_2 rounded-r-3xl md:min-w-56 md:w-56">
        
        <Dropdown Options="bibles" OnOptionChange="OnBibleChange"></Dropdown>
        <DebounceInput type="text" class="w-full h-16 px-4 text-sm bg-black border-0 rounded-xl" placeholder="Book" DebounceTime="200" />

        <BookList Books="books" SelectedBook="selectedBook" OnBookChanged="OnBookChange"></BookList>
    </div>


    <!-- CHAPTERS -->
    <div class="z-10 flex flex-col self-start w-full h-full gap-3 p-3 rounded-r-3xl md:min-w-40 md:w-40">
        
        <ToggleButton Icon="M.A" Message="NEWT" Css="invisible pointer-events-none"></ToggleButton>
        <DebounceInput type="text" class="w-full h-16 p-4 text-sm bg-black border-0 rounded-xl" placeholder="Chapter" DebounceTime="200"/>

        <ChapterList Chapters="chapters" SelectedChapter="selectedChapter" OnChapterChanged="OnChapterChange"/>
    </div>

    <div class="absolute w-96 rounded-r-3xl h-full bg-gray_3 -z-0"></div>


    <!-- RIGHT SIDE -->
    <div class="flex flex-col w-full h-full z-20 overflow-x-auto">

        <div class="flex flex-col gap-3 w-full px-3 py-3">
            
            <div class="flex flex-row-reverse w-full gap-3 ">
                <ToggleButton Icon="P" Message="DOUBLE VIEW" Css="@(showDoubleViewOptions ? "border-gray_1" : "invisible pointer-events-none")" IsChecked="doubleViewMode" OnClick="OnDoubleViewModeToggle" />
                @if (doubleViewMode)
                {
                    <Dropdown Options="bibles" OnOptionChange="OnDoubleViewBibleChange" Css="@(showDoubleViewOptions ? "" : "invisible pointer-events-none")"></Dropdown>
                }
            </div>

            <div class="flex w-full gap-3 justify-between">

                <DebounceInput type="text" class="w-20 h-16 px-4 text-sm bg-black border-0 rounded-xl" placeholder="Verse" DebounceTime="200" />
                <DebounceInput type="text" class="w-1/2 h-16 px-4 text-sm bg-black border-0 rounded-xl" placeholder="Bible Search" DebounceTime="200" />

            </div>

        </div>

        <div class="flex w-full h-full py-1 px-1 overflow-y-hidden bg-black">

            <VerseList Id="VerseList1" Verses="verses" SelectedVerse="selectedVerse" OnVerseChanged="(async (verse) => await OnVerseChange(verse, true))"/>

            @if(doubleViewMode){
                <VerseList Id="VerseList2" Verses="doubleViewVerses" SelectedVerse="selectedVerse" OnVerseChanged="(async (verse) => await OnVerseChange(verse, false))" />
            }

        </div>

    </div>

</div>

@code {
    private List<Book> books = new List<Book>();
    private List<Chapter> chapters = new List<Chapter>();
    private List<BeaconVerse> verses = new List<BeaconVerse>();
    private List<BeaconVerse> doubleViewVerses = new List<BeaconVerse>();

    private List<Tuple<string, string>> bibles = new List<Tuple<string, string>>();

    private Book selectedBook = new Book();
    private Chapter selectedChapter = new Chapter();
    private BeaconVerse selectedVerse = new BeaconVerse();

    private string selectedBible = "";
    private string selectedDoubleViewBible = "";
    private bool doubleViewMode;
    private bool showDoubleViewOptions;

    protected override async Task OnInitializedAsync()
    {
        var biblesFromDatabase = await bibleService.GetBiblesAsync().ConfigureAwait(false);
        foreach(var bible in biblesFromDatabase)
        {
            bibles.Add(new Tuple<string, string>(bible.Abbreviation, bible.Language));
        }

        if (bibles.Count() <= 1)
            showDoubleViewOptions = false;
        else
            showDoubleViewOptions = true;

        selectedBible = bibles[0].Item1;
        selectedDoubleViewBible = bibles[0].Item1;

        if(!String.IsNullOrWhiteSpace(selectedBible))
            books = await bibleService.GetBooksAsync(selectedBible).ConfigureAwait(false);
    }

    //[MAIN EVENTS]=====================================
    private async Task OnBibleChange(string bible) 
    {
        if (bible == selectedBible) return;

        await GetBooksFromBible(bible).ConfigureAwait(false);
        selectedBible = bible;
        selectedVerse = new BeaconVerse();

        if (selectedBook.Id != 0) 
            await GetChaptersFromBook(bible, selectedBook.Id).ConfigureAwait(false);

        if (selectedChapter.Id != 0) 
            await GetVersesFromChapter(bible, selectedBook.Id, selectedChapter.Id).ConfigureAwait(false);

    }
    private async Task OnBookChange(Book book)
    {
        if (selectedBook.Id == book.Id)
            return;

        selectedBook = book;
        await GetChaptersFromBook(selectedBible, book.Id).ConfigureAwait(false);

        if (selectedChapter.Id != 0)
            await GetVersesFromChapter(selectedBible, book.Id, selectedChapter.Id).ConfigureAwait(false);

        if (doubleViewMode)
            await OnDoubleViewBibleChange(selectedDoubleViewBible).ConfigureAwait(false);

    }
    private async Task OnChapterChange(Chapter chapter)
    {
        if (selectedChapter.Id == chapter.Id) return;

        selectedChapter = chapter;
        await GetVersesFromChapter(selectedBible, selectedBook.Id, chapter.Id);

        if (!doubleViewMode) return;

        doubleViewVerses.Clear();
        doubleViewVerses = await bibleService.GetVersesAsync(selectedDoubleViewBible, selectedBook.Id, selectedChapter.Id).ConfigureAwait(false);
    }
    private async Task OnVerseChange(BeaconVerse verse, bool isMain)
    {
        selectedVerse = verse;

        await Task.Delay(1).ConfigureAwait(false);

        //HACKY SOLUTION BUT IT WORKS
        if (isMain)
        {
            await jSRuntime.InvokeVoidAsync("ScrollLogarithmically", "selected_Verse", "VerseList1").ConfigureAwait(false);
            await Task.Delay(300).ConfigureAwait(false);
            await jSRuntime.InvokeVoidAsync("ScrollLogarithmically", "selected_Verse", "VerseList2").ConfigureAwait(false);
        }
        else
        {
            await jSRuntime.InvokeVoidAsync("ScrollLogarithmically", "selected_Verse", "VerseList2").ConfigureAwait(false);
            await Task.Delay(300).ConfigureAwait(false);
            await jSRuntime.InvokeVoidAsync("ScrollLogarithmically", "selected_Verse", "VerseList1").ConfigureAwait(false);
        }
    }

    private async Task GetBooksFromBible(string bible = "")
    {
        books.Clear();
        if(String.IsNullOrWhiteSpace(bible))
            books = await bibleService.GetBooksAsync(selectedBible).ConfigureAwait(false);
        else
            books = await bibleService.GetBooksAsync(bible).ConfigureAwait(false);
    }
    private async Task GetChaptersFromBook(string bible, int book)
    {
        chapters.Clear();
        chapters = await bibleService.GetChaptersAsync(bible, book).ConfigureAwait(false);
    }
    private async Task GetVersesFromChapter(string bible, int book, int chapter)
    {
        verses.Clear();
        verses = await bibleService.GetVersesAsync(bible, book, chapter).ConfigureAwait(false);
    }


    //[DOUBLE VIEW EVENTS]=====================================
    private async Task OnDoubleViewModeToggle()
    {
        doubleViewMode = !doubleViewMode;

        if (doubleViewMode)
        {
            doubleViewVerses.Clear();
            doubleViewVerses = await bibleService.GetVersesAsync(selectedDoubleViewBible, selectedBook.Id, selectedChapter.Id).ConfigureAwait(false);
        }
    }
    private async Task OnDoubleViewBibleChange(string bible) 
    {
        selectedDoubleViewBible = bible;
        doubleViewVerses.Clear();
        doubleViewVerses = await bibleService.GetVersesAsync(bible, selectedBook.Id, selectedChapter.Id).ConfigureAwait(false);
    }
}
