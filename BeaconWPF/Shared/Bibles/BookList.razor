@if (Books is not null)
{
    <div class="flex flex-col w-full h-full overflow-y-auto bg-gray rounded-xl scroll-gutter outline-0">
        @foreach (var book in Books)
        {
            var isSelected = SelectedBook!.Id == book.Id;

            <p class="flex items-center min-h-16 -mx-[5px] p-4 rounded-xl text-sm leading-5 line-clamp-1 cursor-pointer whitespace-pre
                        @(isSelected ? "bg-primary text-white" : "hover:bg-primary hover:text-white hover:bg-opacity-10")"
                 @onclick="(async () => await ChangeBook(book))">
                @Title(book)
            </p>
        }
    </div>
}
@code {
    [Parameter] public Book? SelectedBook { get; set; } = new Book();
    [Parameter] public List<Book>? Books { get; set; }
    [Parameter] public EventCallback<Book> OnBookChanged { get; set; }

    private RenderFragment Title(Book _book) => (builder) =>
    {
        builder.AddMarkupContent(0, $"{_book.Name}");
    };

    private async Task ChangeBook(Book book) => await OnBookChanged.InvokeAsync(book);

    private DateTime lastKeyDownTime = DateTime.MinValue;
    private async Task OnKeyDown(KeyboardEventArgs _args)
    {
        DateTime currentTime = DateTime.Now;
        int timeElapsed = (currentTime - lastKeyDownTime).Milliseconds;
        if (timeElapsed <= 150) return;
        lastKeyDownTime = currentTime;

        if (Books is null && SelectedBook is null || Books!.Count == 0 || SelectedBook!.Id == 0)
            return;

        var index = Books!.IndexOf(Books.Where(b => b.Id == SelectedBook!.Id).First());

        if (_args.Code == "ArrowUp")
            await ChangeBook(Books[Math.Max(index - 1, 0)]);
        else if (_args.Code == "ArrowDown")
            await ChangeBook(Books[Math.Min(index + 1, Books.Count() - 1)]);
    }
}
